#!/usr/bin/env node

'use strict';

const fsp = require('fs-promise');
const colors = require('colors/safe');
const express = require('express');
const http = require('http');
const reload = require('reload');
const minimist = require('minimist');

const build = require('../src/build');

const argv = minimist(process.argv.slice(2));

if(argv._.length !== 1){
    console.error('Must specify exactly one config file');
    process.exit(1);
}

fsp.readFile(argv._[0]).catch(err => {
    console.error(err);
    process.exit(1);
}).then(data => {
    const config = JSON.parse(data.toString());

    return build(config).then(() => {
        if(!argv.watch){
            process.exit(0);
        }

        const app = express();
        app.set('port', argv.port || 8080);
        app.use('/debug.html', express.static(config.OUTPUT.DEBUG_HTML));
        app.use('/debug.js', express.static(config.OUTPUT.DEBUG_JS));
        app.use('/game.html', express.static(config.OUTPUT.HTML));
        app.use('/reload.js', express.static(config.OUTPUT.DEBUG_HTML));

        const server = http.createServer(app);
        const reloader = reload(server, app);

        server.listen(app.get('port'), () => {
            console.log(colors.underline('\nDebug server is running on port ' + app.get('port') + '\n'));
            console.log('Debug: http://localhost:' + app.get('port') + '/debug.html');
            console.log('Game:  http://localhost:' + app.get('port') + '/game.html');

            const filesToWatch = [
                config.INPUT.HTML,
                config.INPUT.CSS
            ].concat(config.INPUT.JS);

            function fileModifiedHandler(file){
                return () => {
                    console.log(file + ' modified\n');

                    build(config).catch(err => {
                        console.error(err);
                    }).then(() => {
                        reloader.reload();

                        console.log(colors.underline('\nWaiting for file changes...'));
                    }).catch(err => {
                        console.error(err);
                    });
                };
            }

            console.log(colors.underline('\nWaiting for file changes...'));

            return Promise.all(filesToWatch.map(file => {
                return fsp.watchFile(file, fileModifiedHandler(file));
            }));
        });
    });
}).catch(err => {
    console.error(err);
});
